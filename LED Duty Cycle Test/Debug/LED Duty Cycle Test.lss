
LED Duty Cycle Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000fe  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008d7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001be  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000011e  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000012e  00000000  00000000  00000c12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000004c  00000000  00000000  00000d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000104  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016a  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00000ffa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1a c0       	rjmp	.+52     	; 0x3a <__bad_interrupt>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>
  1e:	0d c0       	rjmp	.+26     	; 0x3a <__bad_interrupt>
  20:	0c c0       	rjmp	.+24     	; 0x3a <__bad_interrupt>
  22:	0b c0       	rjmp	.+22     	; 0x3a <__bad_interrupt>
  24:	0a c0       	rjmp	.+20     	; 0x3a <__bad_interrupt>
  26:	09 c0       	rjmp	.+18     	; 0x3a <__bad_interrupt>
  28:	08 c0       	rjmp	.+16     	; 0x3a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d1 e0       	ldi	r29, 0x01	; 1
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61
  36:	43 d0       	rcall	.+134    	; 0xbe <main>
  38:	60 c0       	rjmp	.+192    	; 0xfa <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <ledDutyCycle.constprop.1>:

// Set (ledonbits) to (LED_DUTY_CYCLE_PORT) for (cycles) CPU cycles, then send a zero to the port

#define LED_DUTY_CYCLE_PORT (PORTA)

static inline void ledDutyCycle(unsigned char cycles , byte ledonbits )
  3c:	28 2f       	mov	r18, r24
{
	
	switch (cycles) {
  3e:	81 30       	cpi	r24, 0x01	; 1
  40:	29 f0       	breq	.+10     	; 0x4c <__SREG__+0xd>
  42:	08 f4       	brcc	.+2      	; 0x46 <__SREG__+0x7>
  44:	29 c0       	rjmp	.+82     	; 0x98 <L_82+0x6>
  46:	82 30       	cpi	r24, 0x02	; 2
  48:	49 f4       	brne	.+18     	; 0x5c <__SREG__+0x1d>
  4a:	03 c0       	rjmp	.+6      	; 0x52 <__SREG__+0x13>
			break; 
		
		
		case 1:	{	
					
				__asm__ __volatile__ (
  4c:	8b bb       	out	0x1b, r24	; 27
  4e:	1b ba       	out	0x1b, r1	; 27
  50:	08 95       	ret
			}
			break;
			
		case 2: {
		
				__asm__ __volatile__ (
  52:	81 e0       	ldi	r24, 0x01	; 1
  54:	8b bb       	out	0x1b, r24	; 27
  56:	00 00       	nop
  58:	1b ba       	out	0x1b, r1	; 27
  5a:	08 95       	ret
				// delay = 3+(c-1)*3 
				// delay = 3+(3*c)-3 
				// delay = (3*c) 						
				// delay/3 = c
								
				byte loopcounter = cycles/ (byte) 3;		// TODO: either do faster bit compute here, or store dividends and remainder in lookup 
  5c:	63 e0       	ldi	r22, 0x03	; 3
  5e:	41 d0       	rcall	.+130    	; 0xe2 <__udivmodqi4>
  60:	38 2f       	mov	r19, r24
			
				byte remainder = cycles - (loopcounter*3);			// THis is how many cycles we need to pick up the slack to make up for the granularity of the loop 
  62:	6d ef       	ldi	r22, 0xFD	; 253
  64:	35 d0       	rcall	.+106    	; 0xd0 <__mulqi3>
  66:	82 0f       	add	r24, r18
					
				switch (remainder) {
  68:	81 30       	cpi	r24, 0x01	; 1
  6a:	51 f0       	breq	.+20     	; 0x80 <L_62+0x8>
  6c:	18 f0       	brcs	.+6      	; 0x74 <__SREG__+0x35>
  6e:	82 30       	cpi	r24, 0x02	; 2
  70:	99 f4       	brne	.+38     	; 0x98 <L_82+0x6>
  72:	0c c0       	rjmp	.+24     	; 0x8c <L_72+0x8>
						
					case 0:		{// No remainder, so just loop and we will get right delay
						
						__asm__ __volatile__ (
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	8b bb       	out	0x1b, r24	; 27

00000078 <L_62>:
  78:	3a 95       	dec	r19
  7a:	f1 f7       	brne	.-4      	; 0x78 <L_62>
  7c:	1b ba       	out	0x1b, r1	; 27
  7e:	08 95       	ret
					}
					break;
						
					case 1:  {// We need 1 extra cycle to come out with the right delay
						
						__asm__ __volatile__ (
  80:	8b bb       	out	0x1b, r24	; 27
	...

00000084 <L_72>:
  84:	3a 95       	dec	r19
  86:	f1 f7       	brne	.-4      	; 0x84 <L_72>
  88:	1b ba       	out	0x1b, r1	; 27
  8a:	08 95       	ret
					break;
						
						
					case 2:  { // We need 2 extra cycles to come out with the right delay
						
						__asm__ __volatile__ (
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	8b bb       	out	0x1b, r24	; 27
  90:	00 c0       	rjmp	.+0      	; 0x92 <L_82>

00000092 <L_82>:
  92:	3a 95       	dec	r19
  94:	f1 f7       	brne	.-4      	; 0x92 <L_82>
  96:	1b ba       	out	0x1b, r1	; 27
  98:	08 95       	ret

0000009a <ledBrightnessLoop>:
				
}
					


void ledBrightnessLoop(void) {
  9a:	cf 93       	push	r28
	
	PORTD = 0x01;		// Trigger Scope
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	82 bb       	out	0x12, r24	; 18
			
	for(byte x=0;x<255;x++) {
  a0:	c0 e0       	ldi	r28, 0x00	; 0
		ledDutyCycle(x,0x01);		//1-255						
  a2:	8c 2f       	mov	r24, r28
  a4:	cb df       	rcall	.-106    	; 0x3c <ledDutyCycle.constprop.1>

void ledBrightnessLoop(void) {
	
	PORTD = 0x01;		// Trigger Scope
			
	for(byte x=0;x<255;x++) {
  a6:	cf 5f       	subi	r28, 0xFF	; 255
  a8:	cf 3f       	cpi	r28, 0xFF	; 255
  aa:	d9 f7       	brne	.-10     	; 0xa2 <ledBrightnessLoop+0x8>
		ledDutyCycle(x,0x01);		//1-255						
	}
	
	PORTD = 0x00;		// Trigger Scope
  ac:	12 ba       	out	0x12, r1	; 18

	for(byte x=0;x<255;x++) {
  ae:	c0 e0       	ldi	r28, 0x00	; 0
		ledDutyCycle(x,0x01);		//1-255
  b0:	8c 2f       	mov	r24, r28
  b2:	c4 df       	rcall	.-120    	; 0x3c <ledDutyCycle.constprop.1>
		ledDutyCycle(x,0x01);		//1-255						
	}
	
	PORTD = 0x00;		// Trigger Scope

	for(byte x=0;x<255;x++) {
  b4:	cf 5f       	subi	r28, 0xFF	; 255
  b6:	cf 3f       	cpi	r28, 0xFF	; 255
  b8:	d9 f7       	brne	.-10     	; 0xb0 <ledBrightnessLoop+0x16>
		ledDutyCycle(x,0x01);		//1-255
	}


}
  ba:	cf 91       	pop	r28
  bc:	08 95       	ret

000000be <main>:


int main(void) {
		
	CLKPR = _BV(CLKPCE);				// Enable changes to the clock prescaler
  be:	80 e8       	ldi	r24, 0x80	; 128
  c0:	86 bd       	out	0x26, r24	; 38
	CLKPR = 0;							// Set prescaler to 1, we will run full speed
  c2:	16 bc       	out	0x26, r1	; 38

	// Enable output on PORTA0
	DDRD = 0x01; 
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	81 bb       	out	0x11, r24	; 17
	DDRA = 0x03;
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	8a bb       	out	0x1a, r24	; 26

	while(1) ledBrightnessLoop();
  cc:	e6 df       	rcall	.-52     	; 0x9a <ledBrightnessLoop>
  ce:	fe cf       	rjmp	.-4      	; 0xcc <main+0xe>

000000d0 <__mulqi3>:
  d0:	00 24       	eor	r0, r0

000000d2 <__mulqi3_loop>:
  d2:	80 fd       	sbrc	r24, 0
  d4:	06 0e       	add	r0, r22
  d6:	66 0f       	add	r22, r22
  d8:	11 f0       	breq	.+4      	; 0xde <__mulqi3_exit>
  da:	86 95       	lsr	r24
  dc:	d1 f7       	brne	.-12     	; 0xd2 <__mulqi3_loop>

000000de <__mulqi3_exit>:
  de:	80 2d       	mov	r24, r0
  e0:	08 95       	ret

000000e2 <__udivmodqi4>:
  e2:	99 1b       	sub	r25, r25
  e4:	79 e0       	ldi	r23, 0x09	; 9
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <__udivmodqi4_ep>

000000e8 <__udivmodqi4_loop>:
  e8:	99 1f       	adc	r25, r25
  ea:	96 17       	cp	r25, r22
  ec:	08 f0       	brcs	.+2      	; 0xf0 <__udivmodqi4_ep>
  ee:	96 1b       	sub	r25, r22

000000f0 <__udivmodqi4_ep>:
  f0:	88 1f       	adc	r24, r24
  f2:	7a 95       	dec	r23
  f4:	c9 f7       	brne	.-14     	; 0xe8 <__udivmodqi4_loop>
  f6:	80 95       	com	r24
  f8:	08 95       	ret

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
