
LED Duty Cycle Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000186  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000186  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000095f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001fe  00000000  00000000  000009b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000f1  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000153  00000000  00000000  00000ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00000df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000104  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ee  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000111e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1a c0       	rjmp	.+52     	; 0x3a <__bad_interrupt>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>
  1e:	0d c0       	rjmp	.+26     	; 0x3a <__bad_interrupt>
  20:	0c c0       	rjmp	.+24     	; 0x3a <__bad_interrupt>
  22:	0b c0       	rjmp	.+22     	; 0x3a <__bad_interrupt>
  24:	0a c0       	rjmp	.+20     	; 0x3a <__bad_interrupt>
  26:	09 c0       	rjmp	.+18     	; 0x3a <__bad_interrupt>
  28:	08 c0       	rjmp	.+16     	; 0x3a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d1 e0       	ldi	r29, 0x01	; 1
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61
  36:	9b d0       	rcall	.+310    	; 0x16e <main>
  38:	a4 c0       	rjmp	.+328    	; 0x182 <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <ledBrightnessLoop>:
					


void ledBrightnessLoop(void) {
	
	PORTD = 0x01;		// Trigger Scope
  3c:	81 e0       	ldi	r24, 0x01	; 1
  3e:	82 bb       	out	0x12, r24	; 18
  40:	91 e0       	ldi	r25, 0x01	; 1
			}
			break;
			
		case 2: {
		
				__asm__ __volatile__ (
  42:	21 e0       	ldi	r18, 0x01	; 1
  44:	89 2f       	mov	r24, r25
  46:	81 50       	subi	r24, 0x01	; 1
#define LED_DUTY_CYCLE_PORT (PORTA)

static inline void ledDutyCycle(unsigned char cycles , byte ledonbits )
{
	
	switch (cycles) {
  48:	81 30       	cpi	r24, 0x01	; 1
  4a:	09 f1       	breq	.+66     	; 0x8e <L_54+0x16>
  4c:	81 30       	cpi	r24, 0x01	; 1
  4e:	c0 f0       	brcs	.+48     	; 0x80 <L_54+0x8>
  50:	82 30       	cpi	r24, 0x02	; 2
  52:	09 f4       	brne	.+2      	; 0x56 <__SREG__+0x17>
  54:	51 c0       	rjmp	.+162    	; 0xf8 <L_210+0x6>
  56:	83 30       	cpi	r24, 0x03	; 3
  58:	09 f4       	brne	.+2      	; 0x5c <__SREG__+0x1d>
  5a:	49 c0       	rjmp	.+146    	; 0xee <L_150+0x20>
				// delay = 4+(c-1)*4 
				// delay = 4+(4*c)-4 
				// delay = (4*c) 						
				// delay/4 = c
								
				byte loopcounter = cycles/ (byte) 4;		// Compiler should turn this into a shift operation
  5c:	38 2f       	mov	r19, r24
  5e:	36 95       	lsr	r19
  60:	36 95       	lsr	r19
			
				byte remainder = cycles & 0x03 ;			// AND with 0x03 will efficiently return the remainder of divide by 4
  62:	83 70       	andi	r24, 0x03	; 3
					
				switch (remainder) {
  64:	82 30       	cpi	r24, 0x02	; 2
  66:	09 f4       	brne	.+2      	; 0x6a <__SREG__+0x2b>
  68:	7b c0       	rjmp	.+246    	; 0x160 <__stack+0x1>
  6a:	83 30       	cpi	r24, 0x03	; 3
  6c:	09 f4       	brne	.+2      	; 0x70 <__SREG__+0x31>
  6e:	70 c0       	rjmp	.+224    	; 0x150 <L_299+0xc>
  70:	81 30       	cpi	r24, 0x01	; 1
  72:	09 f4       	brne	.+2      	; 0x76 <__SREG__+0x37>
  74:	66 c0       	rjmp	.+204    	; 0x142 <L_268+0xc>
						
					case 0:		{// No remainder, so just loop and we will get right delay
						
						__asm__ __volatile__ (
  76:	2b bb       	out	0x1b, r18	; 27

00000078 <L_54>:
  78:	3a 95       	dec	r19
  7a:	00 00       	nop
  7c:	e9 f7       	brne	.-6      	; 0x78 <L_54>
  7e:	1b ba       	out	0x1b, r1	; 27

void ledBrightnessLoop(void) {
	
	PORTD = 0x01;		// Trigger Scope
			
	for(byte x=0;x<255;x++) {
  80:	9f 3f       	cpi	r25, 0xFF	; 255
  82:	49 f0       	breq	.+18     	; 0x96 <L_54+0x1e>
  84:	9f 5f       	subi	r25, 0xFF	; 255
  86:	89 2f       	mov	r24, r25
  88:	81 50       	subi	r24, 0x01	; 1
#define LED_DUTY_CYCLE_PORT (PORTA)

static inline void ledDutyCycle(unsigned char cycles , byte ledonbits )
{
	
	switch (cycles) {
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	f9 f6       	brne	.-66     	; 0x4c <__SREG__+0xd>
			break; 
		
		
		case 1:	{	
					
				__asm__ __volatile__ (
  8e:	8b bb       	out	0x1b, r24	; 27
  90:	1b ba       	out	0x1b, r1	; 27
  92:	9f 5f       	subi	r25, 0xFF	; 255
  94:	f8 cf       	rjmp	.-16     	; 0x86 <L_54+0xe>
			
	for(byte x=0;x<255;x++) {
		ledDutyCycle(x,0x01);		//1-255						
	}
	
	PORTD = 0x00;		// Trigger Scope
  96:	12 ba       	out	0x12, r1	; 18
  98:	91 e0       	ldi	r25, 0x01	; 1
			}
			break;
			
		case 2: {
		
				__asm__ __volatile__ (
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	89 2f       	mov	r24, r25
  9e:	81 50       	subi	r24, 0x01	; 1
#define LED_DUTY_CYCLE_PORT (PORTA)

static inline void ledDutyCycle(unsigned char cycles , byte ledonbits )
{
	
	switch (cycles) {
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	01 f1       	breq	.+64     	; 0xe4 <L_150+0x16>
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	b8 f0       	brcs	.+46     	; 0xd6 <L_150+0x8>
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	09 f4       	brne	.+2      	; 0xae <L_54+0x36>
  ac:	2f c0       	rjmp	.+94     	; 0x10c <L_232+0x6>
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	41 f1       	breq	.+80     	; 0x102 <L_210+0x10>
				// delay = 4+(c-1)*4 
				// delay = 4+(4*c)-4 
				// delay = (4*c) 						
				// delay/4 = c
								
				byte loopcounter = cycles/ (byte) 4;		// Compiler should turn this into a shift operation
  b2:	38 2f       	mov	r19, r24
  b4:	36 95       	lsr	r19
  b6:	36 95       	lsr	r19
			
				byte remainder = cycles & 0x03 ;			// AND with 0x03 will efficiently return the remainder of divide by 4
  b8:	83 70       	andi	r24, 0x03	; 3
					
				switch (remainder) {
  ba:	82 30       	cpi	r24, 0x02	; 2
  bc:	09 f4       	brne	.+2      	; 0xc0 <L_54+0x48>
  be:	33 c0       	rjmp	.+102    	; 0x126 <L_252+0xe>
  c0:	83 30       	cpi	r24, 0x03	; 3
  c2:	09 f4       	brne	.+2      	; 0xc6 <L_54+0x4e>
  c4:	28 c0       	rjmp	.+80     	; 0x116 <L_232+0x10>
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	09 f4       	brne	.+2      	; 0xcc <L_54+0x54>
  ca:	34 c0       	rjmp	.+104    	; 0x134 <L_260+0xc>
						
					case 0:		{// No remainder, so just loop and we will get right delay
						
						__asm__ __volatile__ (
  cc:	2b bb       	out	0x1b, r18	; 27

000000ce <L_150>:
  ce:	3a 95       	dec	r19
  d0:	00 00       	nop
  d2:	e9 f7       	brne	.-6      	; 0xce <L_150>
  d4:	1b ba       	out	0x1b, r1	; 27
		ledDutyCycle(x,0x01);		//1-255						
	}
	
	PORTD = 0x00;		// Trigger Scope

	for(byte x=0;x<255;x++) {
  d6:	9f 3f       	cpi	r25, 0xFF	; 255
  d8:	49 f0       	breq	.+18     	; 0xec <L_150+0x1e>
  da:	9f 5f       	subi	r25, 0xFF	; 255
  dc:	89 2f       	mov	r24, r25
  de:	81 50       	subi	r24, 0x01	; 1
#define LED_DUTY_CYCLE_PORT (PORTA)

static inline void ledDutyCycle(unsigned char cycles , byte ledonbits )
{
	
	switch (cycles) {
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	01 f7       	brne	.-64     	; 0xa4 <L_54+0x2c>
			break; 
		
		
		case 1:	{	
					
				__asm__ __volatile__ (
  e4:	8b bb       	out	0x1b, r24	; 27
  e6:	1b ba       	out	0x1b, r1	; 27
  e8:	9f 5f       	subi	r25, 0xFF	; 255
  ea:	f8 cf       	rjmp	.-16     	; 0xdc <L_150+0xe>
	for(byte x=0;x<255;x++) {
		ledDutyCycle(x,0x01);		//1-255
	}


}
  ec:	08 95       	ret
			}
			break;

		case 3: {
			
			__asm__ __volatile__ (
  ee:	2b bb       	out	0x1b, r18	; 27
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <L_210>

000000f2 <L_210>:
  f2:	1b ba       	out	0x1b, r1	; 27
  f4:	9f 5f       	subi	r25, 0xFF	; 255
  f6:	c7 cf       	rjmp	.-114    	; 0x86 <L_54+0xe>
			}
			break;
			
		case 2: {
		
				__asm__ __volatile__ (
  f8:	2b bb       	out	0x1b, r18	; 27
  fa:	00 00       	nop
  fc:	1b ba       	out	0x1b, r1	; 27
  fe:	9f 5f       	subi	r25, 0xFF	; 255
 100:	c2 cf       	rjmp	.-124    	; 0x86 <L_54+0xe>
			}
			break;

		case 3: {
			
			__asm__ __volatile__ (
 102:	2b bb       	out	0x1b, r18	; 27
 104:	00 c0       	rjmp	.+0      	; 0x106 <L_232>

00000106 <L_232>:
 106:	1b ba       	out	0x1b, r1	; 27
 108:	9f 5f       	subi	r25, 0xFF	; 255
 10a:	e8 cf       	rjmp	.-48     	; 0xdc <L_150+0xe>
			}
			break;
			
		case 2: {
		
				__asm__ __volatile__ (
 10c:	2b bb       	out	0x1b, r18	; 27
 10e:	00 00       	nop
 110:	1b ba       	out	0x1b, r1	; 27
 112:	9f 5f       	subi	r25, 0xFF	; 255
 114:	e3 cf       	rjmp	.-58     	; 0xdc <L_150+0xe>
					
					break; 

					case 3:  { // We need 2 extra cycles to come out with the right delay
						
						__asm__ __volatile__ (
 116:	2b bb       	out	0x1b, r18	; 27

00000118 <L_252>:
 118:	3a 95       	dec	r19
 11a:	00 00       	nop
 11c:	e9 f7       	brne	.-6      	; 0x118 <L_252>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <L_252+0x8>
 120:	00 00       	nop
 122:	1b ba       	out	0x1b, r1	; 27
 124:	d8 cf       	rjmp	.-80     	; 0xd6 <L_150+0x8>
					break;
						
						
					case 2:  { // We need 2 extra cycles to come out with the right delay
						
						__asm__ __volatile__ (
 126:	2b bb       	out	0x1b, r18	; 27

00000128 <L_260>:
 128:	3a 95       	dec	r19
 12a:	00 00       	nop
 12c:	e9 f7       	brne	.-6      	; 0x128 <L_260>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <L_260+0x8>
 130:	1b ba       	out	0x1b, r1	; 27
 132:	d1 cf       	rjmp	.-94     	; 0xd6 <L_150+0x8>
					}
					break;
						
					case 1:  {// We need 1 extra cycle to come out with the right delay
						
						__asm__ __volatile__ (
 134:	8b bb       	out	0x1b, r24	; 27

00000136 <L_268>:
 136:	3a 95       	dec	r19
 138:	00 00       	nop
 13a:	e9 f7       	brne	.-6      	; 0x136 <L_268>
 13c:	00 00       	nop
 13e:	1b ba       	out	0x1b, r1	; 27
 140:	ca cf       	rjmp	.-108    	; 0xd6 <L_150+0x8>
 142:	8b bb       	out	0x1b, r24	; 27

00000144 <L_299>:
 144:	3a 95       	dec	r19
 146:	00 00       	nop
 148:	e9 f7       	brne	.-6      	; 0x144 <L_299>
 14a:	00 00       	nop
 14c:	1b ba       	out	0x1b, r1	; 27
 14e:	98 cf       	rjmp	.-208    	; 0x80 <L_54+0x8>
					
					break; 

					case 3:  { // We need 2 extra cycles to come out with the right delay
						
						__asm__ __volatile__ (
 150:	2b bb       	out	0x1b, r18	; 27

00000152 <L_307>:
 152:	3a 95       	dec	r19
 154:	00 00       	nop
 156:	e9 f7       	brne	.-6      	; 0x152 <L_307>
 158:	00 c0       	rjmp	.+0      	; 0x15a <L_307+0x8>
 15a:	00 00       	nop
 15c:	1b ba       	out	0x1b, r1	; 27
 15e:	90 cf       	rjmp	.-224    	; 0x80 <L_54+0x8>
					break;
						
						
					case 2:  { // We need 2 extra cycles to come out with the right delay
						
						__asm__ __volatile__ (
 160:	2b bb       	out	0x1b, r18	; 27

00000162 <L_315>:
 162:	3a 95       	dec	r19
 164:	00 00       	nop
 166:	e9 f7       	brne	.-6      	; 0x162 <L_315>
 168:	00 c0       	rjmp	.+0      	; 0x16a <L_315+0x8>
 16a:	1b ba       	out	0x1b, r1	; 27
 16c:	89 cf       	rjmp	.-238    	; 0x80 <L_54+0x8>

0000016e <main>:
}


int main(void) {
		
	CLKPR = _BV(CLKPCE);				// Enable changes to the clock prescaler
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	86 bd       	out	0x26, r24	; 38
	CLKPR = 0;							// Set prescaler to 1, we will run full speed
 172:	16 bc       	out	0x26, r1	; 38

	// Enable output on PORTA0
	DDRD = 0x01; 
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	81 bb       	out	0x11, r24	; 17
	DDRA = 0x03;
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	8a bb       	out	0x1a, r24	; 26

	while(1) ledBrightnessLoop();
 17c:	5f df       	rcall	.-322    	; 0x3c <ledBrightnessLoop>
 17e:	5e df       	rcall	.-324    	; 0x3c <ledBrightnessLoop>
 180:	fd cf       	rjmp	.-6      	; 0x17c <main+0xe>

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
