
LED Duty Cycle Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000f4  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008cb  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000008fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001be  00000000  00000000  0000092a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000011e  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000134  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000004c  00000000  00000000  00000d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000104  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b4  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1a c0       	rjmp	.+52     	; 0x3a <__bad_interrupt>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>
  1e:	0d c0       	rjmp	.+26     	; 0x3a <__bad_interrupt>
  20:	0c c0       	rjmp	.+24     	; 0x3a <__bad_interrupt>
  22:	0b c0       	rjmp	.+22     	; 0x3a <__bad_interrupt>
  24:	0a c0       	rjmp	.+20     	; 0x3a <__bad_interrupt>
  26:	09 c0       	rjmp	.+18     	; 0x3a <__bad_interrupt>
  28:	08 c0       	rjmp	.+16     	; 0x3a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d1 e0       	ldi	r29, 0x01	; 1
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61
  36:	53 d0       	rcall	.+166    	; 0xde <main>
  38:	5b c0       	rjmp	.+182    	; 0xf0 <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <ledDutyCycle.constprop.1>:
#define LED_DUTY_CYCLE_PORT (PORTA)

static inline void ledDutyCycle(unsigned char cycles , byte ledonbits )
{
	
	switch (cycles) {
  3c:	81 30       	cpi	r24, 0x01	; 1
  3e:	39 f0       	breq	.+14     	; 0x4e <__SREG__+0xf>
  40:	08 f4       	brcc	.+2      	; 0x44 <__SREG__+0x5>
  42:	3a c0       	rjmp	.+116    	; 0xb8 <L_97+0xc>
  44:	82 30       	cpi	r24, 0x02	; 2
  46:	31 f0       	breq	.+12     	; 0x54 <__SREG__+0x15>
  48:	83 30       	cpi	r24, 0x03	; 3
  4a:	71 f4       	brne	.+28     	; 0x68 <L_37+0x4>
  4c:	08 c0       	rjmp	.+16     	; 0x5e <__SREG__+0x1f>
			break; 
		
		
		case 1:	{	
					
				__asm__ __volatile__ (
  4e:	8b bb       	out	0x1b, r24	; 27
  50:	1b ba       	out	0x1b, r1	; 27
  52:	08 95       	ret
			}
			break;
			
		case 2: {
		
				__asm__ __volatile__ (
  54:	81 e0       	ldi	r24, 0x01	; 1
  56:	8b bb       	out	0x1b, r24	; 27
  58:	00 00       	nop
  5a:	1b ba       	out	0x1b, r1	; 27
  5c:	08 95       	ret
			}
			break;

		case 3: {
			
			__asm__ __volatile__ (
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	8b bb       	out	0x1b, r24	; 27
  62:	00 c0       	rjmp	.+0      	; 0x64 <L_37>

00000064 <L_37>:
  64:	1b ba       	out	0x1b, r1	; 27
  66:	08 95       	ret
				// delay = 4+(c-1)*4 
				// delay = 4+(4*c)-4 
				// delay = (4*c) 						
				// delay/4 = c
								
				byte loopcounter = cycles/ (byte) 4;		// Compiler should turn this into a shift operation
  68:	98 2f       	mov	r25, r24
  6a:	96 95       	lsr	r25
  6c:	96 95       	lsr	r25
			
				byte remainder = cycles & 0x03 ;			// AND with 0x03 will efficiently return the remainder of divide by 4
  6e:	83 70       	andi	r24, 0x03	; 3
					
				switch (remainder) {
  70:	82 30       	cpi	r24, 0x02	; 2
  72:	91 f0       	breq	.+36     	; 0x98 <L_76+0xc>
  74:	83 30       	cpi	r24, 0x03	; 3
  76:	c1 f0       	breq	.+48     	; 0xa8 <L_86+0xc>
  78:	81 30       	cpi	r24, 0x01	; 1
  7a:	39 f0       	breq	.+14     	; 0x8a <L_67+0xa>
						
					case 0:		{// No remainder, so just loop and we will get right delay
						
						__asm__ __volatile__ (
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	8b bb       	out	0x1b, r24	; 27

00000080 <L_67>:
  80:	9a 95       	dec	r25
  82:	00 00       	nop
  84:	e9 f7       	brne	.-6      	; 0x80 <L_67>
  86:	1b ba       	out	0x1b, r1	; 27
  88:	08 95       	ret
					}
					break;
						
					case 1:  {// We need 1 extra cycle to come out with the right delay
						
						__asm__ __volatile__ (
  8a:	8b bb       	out	0x1b, r24	; 27

0000008c <L_76>:
  8c:	9a 95       	dec	r25
  8e:	00 00       	nop
  90:	e9 f7       	brne	.-6      	; 0x8c <L_76>
  92:	00 00       	nop
  94:	1b ba       	out	0x1b, r1	; 27
  96:	08 95       	ret
					break;
						
						
					case 2:  { // We need 2 extra cycles to come out with the right delay
						
						__asm__ __volatile__ (
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	8b bb       	out	0x1b, r24	; 27

0000009c <L_86>:
  9c:	9a 95       	dec	r25
  9e:	00 00       	nop
  a0:	e9 f7       	brne	.-6      	; 0x9c <L_86>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <L_86+0x8>
  a4:	1b ba       	out	0x1b, r1	; 27
  a6:	08 95       	ret
					
					break; 

					case 3:  { // We need 2 extra cycles to come out with the right delay
						
						__asm__ __volatile__ (
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	8b bb       	out	0x1b, r24	; 27

000000ac <L_97>:
  ac:	9a 95       	dec	r25
  ae:	00 00       	nop
  b0:	e9 f7       	brne	.-6      	; 0xac <L_97>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <L_97+0x8>
  b4:	00 00       	nop
  b6:	1b ba       	out	0x1b, r1	; 27
  b8:	08 95       	ret

000000ba <ledBrightnessLoop>:
				
}
					


void ledBrightnessLoop(void) {
  ba:	cf 93       	push	r28
	
	PORTD = 0x01;		// Trigger Scope
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	82 bb       	out	0x12, r24	; 18
			
	for(byte x=0;x<255;x++) {
  c0:	c0 e0       	ldi	r28, 0x00	; 0
		ledDutyCycle(x,0x01);		//1-255						
  c2:	8c 2f       	mov	r24, r28
  c4:	bb df       	rcall	.-138    	; 0x3c <ledDutyCycle.constprop.1>

void ledBrightnessLoop(void) {
	
	PORTD = 0x01;		// Trigger Scope
			
	for(byte x=0;x<255;x++) {
  c6:	cf 5f       	subi	r28, 0xFF	; 255
  c8:	cf 3f       	cpi	r28, 0xFF	; 255
  ca:	d9 f7       	brne	.-10     	; 0xc2 <ledBrightnessLoop+0x8>
		ledDutyCycle(x,0x01);		//1-255						
	}
	
	PORTD = 0x00;		// Trigger Scope
  cc:	12 ba       	out	0x12, r1	; 18

	for(byte x=0;x<255;x++) {
  ce:	c0 e0       	ldi	r28, 0x00	; 0
		ledDutyCycle(x,0x01);		//1-255
  d0:	8c 2f       	mov	r24, r28
  d2:	b4 df       	rcall	.-152    	; 0x3c <ledDutyCycle.constprop.1>
		ledDutyCycle(x,0x01);		//1-255						
	}
	
	PORTD = 0x00;		// Trigger Scope

	for(byte x=0;x<255;x++) {
  d4:	cf 5f       	subi	r28, 0xFF	; 255
  d6:	cf 3f       	cpi	r28, 0xFF	; 255
  d8:	d9 f7       	brne	.-10     	; 0xd0 <ledBrightnessLoop+0x16>
		ledDutyCycle(x,0x01);		//1-255
	}


}
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <main>:


int main(void) {
		
	CLKPR = _BV(CLKPCE);				// Enable changes to the clock prescaler
  de:	80 e8       	ldi	r24, 0x80	; 128
  e0:	86 bd       	out	0x26, r24	; 38
	CLKPR = 0;							// Set prescaler to 1, we will run full speed
  e2:	16 bc       	out	0x26, r1	; 38

	// Enable output on PORTA0
	DDRD = 0x01; 
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	81 bb       	out	0x11, r24	; 17
	DDRA = 0x03;
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	8a bb       	out	0x1a, r24	; 26

	while(1) ledBrightnessLoop();
  ec:	e6 df       	rcall	.-52     	; 0xba <ledBrightnessLoop>
  ee:	fe cf       	rjmp	.-4      	; 0xec <main+0xe>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
